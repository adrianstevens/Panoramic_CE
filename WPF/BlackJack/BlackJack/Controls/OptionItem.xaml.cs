using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;

namespace BlackJack.Controls
{
    public partial class OptionItem : UserControl
    {
        private class TypeOptionItem
        {
            public string szItem { get; set; }
            public string szImage { get; set; }
        }
        int _iCurrentIndex = 0;
        int _iYPosition = 0;
        int _iXPosition = 0;
        DateTime _dtNow;
        bool _bBtnDown = false;
        private List<TypeOptionItem> _arrItems = new List<TypeOptionItem>();

        public int iRefID
        {
            get { return _iRefID; }
            set { _iRefID = value; }
        }
        private int _iRefID = 0;

        public delegate void UpdateIndexHandler(int iID, int iSelIndex);

        public UpdateIndexHandler IndexUpdate
        {
            get { return _IndexUpdate; }
            set { _IndexUpdate = value; }
        }
        private UpdateIndexHandler _IndexUpdate;

        public delegate void MouseUpHandler();

        public MouseUpHandler MouseUpUpdate
        {
            get { return _MouseUpUpdate; }
            set { _MouseUpUpdate = value; }
        }
        private MouseUpHandler _MouseUpUpdate;

        public OptionItem()
        {
            InitializeComponent();
        }
        public void AddItem(string szItem)
        {
            TypeOptionItem i = new TypeOptionItem();
            i.szItem = szItem;
            _arrItems.Add(i);
        }
        public void AddImageItem(string szItem, string szImageSource)
        {
            TypeOptionItem i = new TypeOptionItem();
            i.szItem = szItem;
            i.szImage = szImageSource;
            _arrItems.Add(i);
        }
        public void SetCurrentIndex(int iIndex)
        {
            _iCurrentIndex = 0;

            if (iIndex < 0 || iIndex >= _arrItems.Count)
                return;

            _iCurrentIndex = iIndex;
        }
        public int GetCurrentIndex() 
        { return _iCurrentIndex; }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            // set the subItem text
            if(_arrItems.Count > 0)
                txtSubItem.Text = _arrItems[_iCurrentIndex].szItem;
        }
        private void UserControl_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //VisualStateManager.GoToState((Control)sender, "Selected", true);
           // Grid g = (Grid)sender;

            Control c = (Control)sender;

            UserControl uCon = (UserControl)sender;
            GeneralTransform gt = uCon.TransformToVisual(this);
            Point offset = e.GetPosition(this);
            _iYPosition = (int)offset.Y;
            _iXPosition = (int)offset.X;
            _dtNow = DateTime.Now;

      
            _bBtnDown = true;
        }
        private void UserControl_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (MouseUpUpdate != null)
                MouseUpUpdate();

            //VisualStateManager.GoToState((Control)sender, "UnSelected", true);
                
            if (!_bBtnDown)
                return;

            _bBtnDown = false;

            UserControl uCon = (UserControl)sender;
            Point offset = e.GetPosition(this);

            // as long as we did move it too much
            if (Math.Abs(offset.Y - _iYPosition) > 20 || 
                Math.Abs(offset.X - _iXPosition) > 20 ||
                DateTime.Now.Subtract(_dtNow).TotalMilliseconds > 1500)
                return;

            // add the control to the main grid, & make it stretch over the full page size.
            // Animations etc are generated by the popup's constructor

            PopupMenu pop = new PopupMenu(uCon, txtTitle.Text);

            for (int i = 0; i < _arrItems.Count; i++)
            {
                TypeOptionItem item = _arrItems[i];
                if (item.szImage != null && item.szImage.Length > 0)
                    pop.AddImageItem(item.szItem, item.szImage);
                else
                    pop.AddItem(item.szItem);
            }
            pop.SetCurrentIndex(_iCurrentIndex);
            pop.Launch(LayoutRoot, this);

            pop.SelectionChanged += delegate(object MySender, PopupMenuEventArgs eArg)
            {
                _iCurrentIndex = eArg.iSelected;
                txtSubItem.Text = _arrItems[_iCurrentIndex].szItem;
                if (IndexUpdate != null)
                    IndexUpdate(iRefID, _iCurrentIndex);
            };
        }
        private void UserControl_MouseLeave(object sender, MouseEventArgs e)
        {
            //VisualStateManager.GoToState((Control)sender, "UnSelected", true);
            _bBtnDown = false;
        }     
    }
}
