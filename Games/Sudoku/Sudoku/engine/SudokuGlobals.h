#pragma once

#define REG_KEY _T("SOFTWARE\\Pano\\Sudoku") 

#define WM_UPDATECELL   WM_USER + 200
#define WM_UNDOMOVE     WM_USER + 201

#define CORRECT_CELL_ANIMATION_TIME 400

#define MAX_GRID_SIZE  11
#define BOARD_SIZE MAX_GRID_SIZE //for Kakuro .. too lazy to change

#define SUDOKU_Size		9

#define NUM_COLUMNS		9
#define NUM_ROWS		9
#define NUM_DIGITS		9

#define KOUTLINE_None       0
#define KOUTLINE_Horizontal 1
#define KOUTLINE_Vertical   2
#define KOUTLINE_Top        4
#define KOUTLINE_Bottom     8
#define KOUTLINE_Left       16
#define KOUTLINE_Right      32

enum EnumLastMove
{
    LASTMOVE_Pencil,
    LASTMOVE_Guess,
    LASTMOVE_None,
};

struct TypeLastMove
{
    EnumLastMove    eLastMove; //last move
    int             iX; //x position of last move
    int             iY; //y position of last move
    int             iTile; //value of last tile
};


struct StructNumberList
{
    byte	btNumCells;
    WORD	btTotal;
    WORD	wIncluded;	
};

enum EnumDifficulty
{
    DIFF_VeryEasy,
    DIFF_Easy,
    DIFF_Medium,
    DIFF_Hard,
    DIFF_VeryHard,
    DIFF_Hardcore,
    DIFF_UnKnown,
};

//get rid of this ... I think ....
enum EnumLevel
{
    LVL_Easy,
    LVL_Medium,
    LVL_Hard,
};

enum EnumSize
{
    //	KSIZE_4,
    KSIZE_5,
    //	KSIZE_6,
    KSIZE_7,
    //	KSIZE_8,
    KSIZE_9,
};

enum EnumBackground
{
    BACKGROUND_Default,
    BACKGROUND_Custom,
    BACKGROUND_PurpleWhite,
    BACKGROUND_BlackWhite,
    BACKGROUND_GreenWhite,
    BACKGROUND_BlueWhite,
    BACKGROUND_DBlueWhite,
    BACKGROUND_PinkWhite,
    BACKGROUND_OrangeWhite,
    BACKGROUND_GreyBlack,
    BACKGROUND_RedBlack,
    BACKGROUND_PurpleBlack,
    BACKGROUND_BlueBlack,
    BACKGROUND_GreenBlack,
    BACKGROUND_DBlueBlue,
    BACKGROUND_BlueGreen,
    BACKGROUND_DGReenGreen,
    BACKGROUND_White,
    BACKGROUND_Black,
    BACKGROUND_Grey,
    BACKGROUND_Green,
    BACKGROUND_LPink,
    BACKGROUND_Orange,
    BACKGROUND_Blue,
    BACKGROUND_DBlue,
    BACKGROUND_DGreen,
    BACKGROUND_Pink,
    BACKGROUND_Purple,
    BACKGROUND_Count,
};


//static so it doesn't bitch ... 
static StructNumberList g_sNumList[] = 
{
    {1,1,256},		//1
    {1,2,128},		//2
    {1,3,64},		//3
    {1,4,32},		//4
    {1,5,16},		//5
    {1,6,8},		//6
    {1,7,4},		//7
    {1,8,2},		//8
    {1,9,1},		//9
    {2,3,384},		//12
    {2,4,320},		//13
    {2,5,480},		//1234
    {2,6,432},		//1245
    {2,7,504},		//123456
    {2,8,476},		//123567
    {2,9,510},		//12345678
    {2,10,495},		//12346789
    {2,11,255},		//23456789
    {2,12,119},		//345789
    {2,13,63},		//456789
    {2,14,27},		//5689
    {2,15,15},		//6789
    {2,16,5},		//79
    {2,17,3},		//89
    {3,6,448},		//123
    {3,7,416},		//124
    {3,8,496},		//12345
    {3,9,504},		//123456
    {3,10,508},		//1234567
    {3,11,510},		//12345678
    {3,12,511},		//123456789
    {3,13,511},		//123456789
    {3,14,511},		//123456789
    {3,15,511},		//123456789
    {3,16,511},		//123456789
    {3,17,511},		//123456789
    {3,18,511},		//123456789
    {3,19,255},		//23456789
    {3,20,127},		//3456789
    {3,21,63},		//456789
    {3,22,31},		//56789
    {3,23,11},		//689
    {3,24,7},		//789
    {4,10,480},		//1234
    {4,11,464},		//1235
    {4,12,504},		//123456
    {4,13,508},		//1234567
    {4,14,510},		//12345678
    {4,15,511},		//123456789
    {4,16,511},		//123456789
    {4,17,511},		//123456789
    {4,18,511},		//123456789
    {4,19,511},		//123456789
    {4,20,511},		//123456789
    {4,21,511},		//123456789
    {4,22,511},		//123456789
    {4,23,511},		//123456789
    {4,24,511},		//123456789
    {4,25,511},		//123456789
    {4,26,255},		//23456789
    {4,27,127},		//3456789
    {4,28,63},		//456789
    {4,29,23},		//5789
    {4,30,15},		//6789
    {5,15,496},		//12345
    {5,16,488},		//12346
    {5,17,508},		//1234567
    {5,18,510},		//12345678
    {5,19,511},		//123456789
    {5,20,511},		//123456789
    {5,21,511},		//123456789
    {5,22,511},		//123456789
    {5,23,511},		//123456789
    {5,24,511},		//123456789
    {5,25,511},		//123456789
    {5,26,511},		//123456789
    {5,27,511},		//123456789
    {5,28,511},		//123456789
    {5,29,511},		//123456789
    {5,30,511},		//123456789
    {5,31,511},		//123456789
    {5,32,255},		//23456789
    {5,33,127},		//3456789
    {5,34,47},		//46789
    {5,35,31},		//56789
    {6,21,504},		//123456
    {6,22,500},		//123457
    {6,23,510},		//12345678
    {6,24,511},		//123456789
    {6,25,511},		//123456789
    {6,26,511},		//123456789
    {6,27,511},		//123456789
    {6,28,511},		//123456789
    {6,29,511},		//123456789
    {6,30,511},		//123456789
    {6,31,511},		//123456789
    {6,32,511},		//123456789
    {6,33,511},		//123456789
    {6,34,511},		//123456789
    {6,35,511},		//123456789
    {6,36,511},		//123456789
    {6,37,255},		//23456789
    {6,38,95},		//356789
    {6,39,63},		//456789
    {7,28,508},		//1234567
    {7,29,506},		//1234568
    {7,30,511},		//123456789
    {7,31,511},		//123456789
    {7,32,511},		//123456789
    {7,33,511},		//123456789
    {7,34,511},		//123456789
    {7,35,511},		//123456789
    {7,36,511},		//123456789
    {7,37,511},		//123456789
    {7,38,511},		//123456789
    {7,39,511},		//123456789
    {7,40,511},		//123456789
    {7,41,191},		//2456789
    {7,42,127},		//3456789
    {8,36,510},		//12345678
    {8,37,509},		//12345679
    {8,38,507},		//12345689
    {8,39,503},		//12345789
    {8,40,495},		//12346789
    {8,41,479},		//12356789
    {8,42,447},		//12456789
    {8,43,383},		//13456789
    {8,44,255},		//123456789
    {9,45,511},		//123456789
};

static StructNumberList g_sMultiNumList[] = 
{
    {2, 2, 384},
    {2, 3, 320},
    {2, 4, 288},
    {2, 5, 272},
    {2, 6, 456},
    {2, 7, 260},
    {2, 8, 418},
    {2, 9, 257},
    {2, 10, 144},
    {2, 12, 232},
    {2, 14, 132},
    {2, 16, 130},
    {2, 18, 201},
    {2, 15, 80},
    {2, 21, 68},
    {2, 24, 106},
    {2, 27, 65},
    {2, 20, 48},
    {2, 28, 36},
    {2, 32, 34},
    {2, 36, 33},
    {2, 30, 24},
    {2, 35, 20},
    {2, 40, 18},
    {2, 45, 17},
    {2, 42, 12},
    {2, 48, 10},
    {2, 54, 9},
    {2, 56, 6},
    {2, 63, 5},
    {2, 72, 3},
    {3, 6, 448},
    {3, 8, 416},
    {3, 10, 400},
    {3, 12, 488},
    {3, 14, 388},
    {3, 16, 386},
    {3, 18, 457},
    {3, 15, 336},
    {3, 21, 324},
    {3, 24, 490},
    {3, 27, 321},
    {3, 20, 304},
    {3, 28, 292},
    {3, 32, 290},
    {3, 36, 489},
    {3, 30, 472},
    {3, 35, 276},
    {3, 40, 434},
    {3, 45, 273},
    {3, 42, 460},
    {3, 48, 490},
    {3, 54, 457},
    {3, 56, 422},
    {3, 63, 261},
    {3, 72, 491},
    {3, 64, 162},
    {3, 60, 248},
    {3, 70, 148},
    {3, 80, 146},
    {3, 90, 217},
    {3, 84, 236},
    {3, 96, 234},
    {3, 108, 233},
    {3, 112, 134},
    {3, 126, 205},
    {3, 144, 203},
    {3, 105, 84},
    {3, 120, 122},
    {3, 135, 81},
    {3, 162, 73},
    {3, 168, 110},
    {3, 189, 69},
    {3, 216, 107},
    {3, 140, 52},
    {3, 160, 50},
    {3, 180, 49},
    {3, 192, 42},
    {3, 224, 38},
    {3, 252, 37},
    {3, 288, 35},
    {3, 210, 28},
    {3, 240, 26},
    {3, 270, 25},
    {3, 280, 22},
    {3, 315, 21},
    {3, 360, 19},
    {3, 336, 14},
    {3, 378, 13},
    {3, 432, 11},
    {3, 504, 7},
    {4, 24, 480},
    {4, 30, 464},
    {4, 36, 456},
    {4, 42, 452},
    {4, 48, 490},
    {4, 54, 449},
    {4, 40, 432},
    {4, 56, 420},
    {4, 64, 418},
    {4, 72, 489},
    {4, 60, 504},
    {4, 70, 404},
    {4, 80, 402},
    {4, 90, 473},
    {4, 84, 492},
    {4, 96, 490},
    {4, 108, 489},
    {4, 112, 390},
    {4, 126, 461},
    {4, 144, 491},
    {4, 105, 340},
    {4, 120, 506},
    {4, 135, 337},
    {4, 162, 329},
    {4, 168, 494},
    {4, 189, 325},
    {4, 216, 491},
    {4, 140, 308},
    {4, 160, 306},
    {4, 180, 505},
    {4, 192, 490},
    {4, 224, 294},
    {4, 252, 493},
    {4, 288, 491},
    {4, 210, 476},
    {4, 240, 506},
    {4, 270, 473},
    {4, 280, 438},
    {4, 315, 277},
    {4, 360, 507},
    {4, 336, 494},
    {4, 378, 461},
    {4, 432, 491},
    {4, 504, 495},
    {4, 324, 201},
    {4, 320, 178},
    {4, 384, 170},
    {4, 448, 166},
    {4, 576, 235},
    {4, 420, 252},
    {4, 480, 250},
    {4, 540, 249},
    {4, 560, 150},
    {4, 630, 221},
    {4, 720, 219},
    {4, 672, 238},
    {4, 756, 237},
    {4, 864, 235},
    {4, 1008, 207},
    {4, 648, 105},
    {4, 810, 89},
    {4, 840, 126},
    {4, 945, 85},
    {4, 1080, 123},
    {4, 1134, 77},
    {4, 1296, 75},
    {4, 1512, 111},
    {4, 960, 58},
    {4, 1120, 54},
    {4, 1260, 53},
    {4, 1440, 51},
    {4, 1344, 46},
    {4, 1728, 43},
    {4, 2016, 39},
    {4, 1680, 30},
    {4, 1890, 29},
    {4, 2160, 27},
    {4, 2520, 23},
    {4, 3024, 15},
    {5, 120, 496},
    {5, 144, 488},
    {5, 168, 484},
    {5, 192, 482},
    {5, 216, 481},
    {5, 180, 472},
    {5, 210, 468},
    {5, 240, 506},
    {5, 270, 465},
    {5, 252, 460},
    {5, 288, 458},
    {5, 324, 457},
    {5, 336, 494},
    {5, 378, 453},
    {5, 432, 491},
    {5, 280, 436},
    {5, 320, 434},
    {5, 360, 505},
    {5, 384, 426},
    {5, 448, 422},
    {5, 504, 493},
    {5, 576, 491},
    {5, 420, 508},
    {5, 480, 506},
    {5, 540, 505},
    {5, 560, 406},
    {5, 630, 477},
    {5, 720, 507},
    {5, 672, 494},
    {5, 756, 493},
    {5, 864, 491},
    {5, 1008, 495},
    {5, 648, 361},
    {5, 810, 345},
    {5, 840, 510},
    {5, 945, 341},
    {5, 1080, 507},
    {5, 1134, 333},
    {5, 1296, 491},
    {5, 1512, 495},
    {5, 960, 506},
    {5, 1120, 310},
    {5, 1260, 509},
    {5, 1440, 507},
    {5, 1344, 494},
    {5, 1728, 491},
    {5, 2016, 495},
    {5, 1680, 510},
    {5, 1890, 477},
    {5, 2160, 507},
    {5, 2520, 511},
    {5, 3024, 495},
    {5, 1152, 234},
    {5, 1620, 217},
    {5, 2268, 205},
    {5, 2592, 203},
    {5, 1920, 186},
    {5, 2240, 182},
    {5, 2880, 251},
    {5, 2688, 174},
    {5, 3456, 171},
    {5, 4032, 239},
    {5, 3360, 254},
    {5, 3780, 253},
    {5, 4320, 251},
    {5, 5040, 223},
    {5, 6048, 239},
    {5, 3240, 121},
    {5, 4536, 109},
    {5, 5184, 107},
    {5, 5670, 93},
    {5, 6480, 91},
    {5, 7560, 127},
    {5, 9072, 79},
    {5, 6720, 62},
    {5, 8640, 59},
    {5, 10080, 55},
    {5, 12096, 47},
    {5, 15120, 31},
    {6, 720, 504},
    {6, 840, 500},
    {6, 960, 498},
    {6, 1080, 497},
    {6, 1008, 492},
    {6, 1152, 490},
    {6, 1296, 489},
    {6, 1344, 486},
    {6, 1512, 485},
    {6, 1728, 483},
    {6, 1260, 476},
    {6, 1440, 474},
    {6, 1620, 473},
    {6, 1680, 510},
    {6, 1890, 469},
    {6, 2160, 507},
    {6, 2016, 462},
    {6, 2268, 461},
    {6, 2592, 459},
    {6, 3024, 495},
    {6, 1920, 442},
    {6, 2240, 438},
    {6, 2520, 509},
    {6, 2880, 507},
    {6, 2688, 430},
    {6, 3456, 427},
    {6, 4032, 495},
    {6, 3360, 510},
    {6, 3780, 509},
    {6, 4320, 507},
    {6, 5040, 511},
    {6, 6048, 495},
    {6, 3240, 377},
    {6, 4536, 365},
    {6, 5184, 363},
    {6, 5670, 349},
    {6, 6480, 507},
    {6, 7560, 511},
    {6, 9072, 495},
    {6, 6720, 510},
    {6, 8640, 507},
    {6, 10080, 511},
    {6, 12096, 495},
    {6, 15120, 511},
    {6, 5760, 250},
    {6, 8064, 238},
    {6, 10368, 235},
    {6, 11340, 221},
    {6, 12960, 219},
    {6, 18144, 207},
    {6, 13440, 190},
    {6, 17280, 187},
    {6, 20160, 255},
    {6, 24192, 175},
    {6, 30240, 255},
    {6, 22680, 125},
    {6, 25920, 123},
    {6, 36288, 111},
    {6, 45360, 95},
    {6, 60480, 63},

};

static StructNumberList g_sSubNumList[] = 
{
    {2,1,511},//123456789
    {2,2,511},//123456789
    {2,3,511},//123456789
    {2,4,511},//123456789
    {2,5,495},//12346789
    {2,6,455},//123789
    {2,7,387},//1289
    {2,8,257},//19
    {3,0,511},
    {3,1,511},//123456789
    {3,2,511},//123456789
    {3,3,511},//123456789
    {3,4,487},//1234789
    {3,5,386},//128
    {3,6,385},//129
    {4,0,511},
    {4,1,503},//12345789
    {4,2,483},//123489
    {4,3,449},//1239
};

static StructNumberList g_sDivNumList[] = 
{
    {2,2,490},//123468
    {2,3,457},//12369
    {2,4,418},//1248
    {2,5,272},//15
    {2,6,264},//16
    {2,7,260},//17
    {2,8,258},//18
    {2,9,257},//19
    {3,2,490},//123468
    {3,3,457},//12369
    {3,4,386},//128
    {4,1,387},//1248
};

